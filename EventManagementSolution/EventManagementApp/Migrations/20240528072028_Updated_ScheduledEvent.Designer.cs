// <auto-generated />
using System;
using EventManagementApp.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventManagementApp.Migrations
{
    [DbContext(typeof(EventManagementDBContext))]
    [Migration("20240528072028_Updated_ScheduledEvent")]
    partial class Updated_ScheduledEvent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventManagementApp.Models.ClientResponse", b =>
                {
                    b.Property<int>("ClientResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientResponseId"));

                    b.Property<string>("ClientDecision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ClientResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuotationResponseId")
                        .HasColumnType("int");

                    b.HasKey("ClientResponseId");

                    b.HasIndex("QuotationResponseId")
                        .IsUnique();

                    b.ToTable("ClientResponses");
                });

            modelBuilder.Entity("EventManagementApp.Models.EventCategory", b =>
                {
                    b.Property<int>("EventCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventCategoryId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("EventCategoryId");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("EventManagementApp.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("ClientResponseId")
                        .HasColumnType("int");

                    b.Property<int>("EventCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientResponseId")
                        .IsUnique();

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EventManagementApp.Models.QuotationRequest", b =>
                {
                    b.Property<int>("QuotationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotationRequestId"));

                    b.Property<string>("CateringInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FoodPreference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SpecialInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VenueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuotationRequestId");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("QuotationRequests");
                });

            modelBuilder.Entity("EventManagementApp.Models.QuotationResponse", b =>
                {
                    b.Property<int>("QuotationResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuotationResponseId"));

                    b.Property<int>("QuotationRequestId")
                        .HasColumnType("int");

                    b.Property<double?>("QuotedAmount")
                        .HasColumnType("float");

                    b.Property<string>("RequestStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponseMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuotationResponseId");

                    b.HasIndex("QuotationRequestId")
                        .IsUnique();

                    b.ToTable("QuotationResponses");
                });

            modelBuilder.Entity("EventManagementApp.Models.Refund", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("RefundAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefundStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RefundId");

                    b.HasIndex("OrderId");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("EventManagementApp.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("ClientResponseId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventCategoryId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ClientResponseId")
                        .IsUnique();

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("EventManagementApp.Models.ScheduledEvent", b =>
                {
                    b.Property<int>("ScheduledEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduledEventId"));

                    b.Property<int>("ClienResponseId")
                        .HasColumnType("int");

                    b.Property<int>("EventCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("QuotationRequestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ScheduledEventId");

                    b.HasIndex("ClienResponseId")
                        .IsUnique();

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("QuotationRequestId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("ScheduledEvents");
                });

            modelBuilder.Entity("EventManagementApp.Models.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("EventManagementApp.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2024, 5, 28, 12, 50, 27, 823, DateTimeKind.Local).AddTicks(4854),
                            Email = "admin@bookmyevent.in",
                            FullName = "Book My Event",
                            PhoneNumber = "97343792398"
                        });
                });

            modelBuilder.Entity("EventManagementApp.Models.UserCredential", b =>
                {
                    b.Property<int>("UserCredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCredentialId"));

                    b.Property<byte[]>("HashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserCredentialId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserCredentials");

                    b.HasData(
                        new
                        {
                            UserCredentialId = 1,
                            HashKey = new byte[] { 31, 59, 86, 36, 208, 163, 227, 71, 218, 223, 89, 126, 145, 220, 155, 132, 90, 119, 35, 222, 156, 244, 142, 18, 55, 153, 194, 43, 89, 121, 148, 168, 42, 231, 172, 110, 72, 197, 70, 11, 184, 34, 217, 15, 218, 156, 203, 250, 86, 221, 156, 53, 93, 56, 81, 211, 183, 76, 32, 73, 73, 225, 101, 191, 209, 70, 1, 125, 131, 200, 118, 228, 220, 204, 4, 240, 60, 142, 105, 129, 137, 97, 158, 15, 211, 201, 138, 192, 149, 168, 97, 14, 39, 250, 54, 208, 95, 197, 112, 79, 207, 195, 191, 232, 226, 129, 221, 248, 108, 188, 99, 229, 250, 184, 112, 212, 189, 246, 175, 223, 137, 108, 202, 9, 23, 29, 170, 68 },
                            HashedPassword = new byte[] { 235, 147, 30, 129, 229, 167, 112, 53, 110, 174, 103, 143, 34, 255, 197, 139, 54, 144, 202, 187, 53, 200, 237, 46, 63, 83, 21, 194, 245, 127, 181, 130, 64, 83, 33, 196, 134, 237, 92, 154, 45, 25, 41, 140, 37, 181, 20, 175, 195, 26, 114, 6, 192, 146, 215, 0, 202, 233, 93, 140, 56, 12, 90, 54 },
                            Role = "Admin",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("EventManagementApp.Models.ClientResponse", b =>
                {
                    b.HasOne("EventManagementApp.Models.QuotationResponse", "QuotationResponse")
                        .WithOne("ClientResponse")
                        .HasForeignKey("EventManagementApp.Models.ClientResponse", "QuotationResponseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuotationResponse");
                });

            modelBuilder.Entity("EventManagementApp.Models.Order", b =>
                {
                    b.HasOne("EventManagementApp.Models.ClientResponse", "ClientResponse")
                        .WithOne("Order")
                        .HasForeignKey("EventManagementApp.Models.Order", "ClientResponseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementApp.Models.EventCategory", "EventCategory")
                        .WithMany("Orders")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementApp.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientResponse");

                    b.Navigation("EventCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementApp.Models.QuotationRequest", b =>
                {
                    b.HasOne("EventManagementApp.Models.EventCategory", "EventCategory")
                        .WithMany("QuotationRequests")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementApp.Models.User", "User")
                        .WithMany("QuotationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementApp.Models.QuotationResponse", b =>
                {
                    b.HasOne("EventManagementApp.Models.QuotationRequest", "QuotationRequest")
                        .WithOne("QuotationResponse")
                        .HasForeignKey("EventManagementApp.Models.QuotationResponse", "QuotationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("QuotationRequest");
                });

            modelBuilder.Entity("EventManagementApp.Models.Refund", b =>
                {
                    b.HasOne("EventManagementApp.Models.Order", "Order")
                        .WithMany("Refunds")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EventManagementApp.Models.Review", b =>
                {
                    b.HasOne("EventManagementApp.Models.ClientResponse", "ClientResponse")
                        .WithOne("Review")
                        .HasForeignKey("EventManagementApp.Models.Review", "ClientResponseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementApp.Models.EventCategory", "EventCategory")
                        .WithMany("Reviews")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementApp.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientResponse");

                    b.Navigation("EventCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementApp.Models.ScheduledEvent", b =>
                {
                    b.HasOne("EventManagementApp.Models.ClientResponse", "ClientResponse")
                        .WithOne()
                        .HasForeignKey("EventManagementApp.Models.ScheduledEvent", "ClienResponseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementApp.Models.EventCategory", "EventCategory")
                        .WithMany("ScheduledEvents")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementApp.Models.QuotationRequest", "QuotationRequest")
                        .WithOne()
                        .HasForeignKey("EventManagementApp.Models.ScheduledEvent", "QuotationRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventManagementApp.Models.User", "User")
                        .WithMany("ScheduledEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientResponse");

                    b.Navigation("EventCategory");

                    b.Navigation("QuotationRequest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementApp.Models.Transaction", b =>
                {
                    b.HasOne("EventManagementApp.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EventManagementApp.Models.UserCredential", b =>
                {
                    b.HasOne("EventManagementApp.Models.User", "User")
                        .WithOne("UserCredential")
                        .HasForeignKey("EventManagementApp.Models.UserCredential", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventManagementApp.Models.ClientResponse", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();

                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("EventManagementApp.Models.EventCategory", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("QuotationRequests");

                    b.Navigation("Reviews");

                    b.Navigation("ScheduledEvents");
                });

            modelBuilder.Entity("EventManagementApp.Models.Order", b =>
                {
                    b.Navigation("Refunds");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EventManagementApp.Models.QuotationRequest", b =>
                {
                    b.Navigation("QuotationResponse")
                        .IsRequired();
                });

            modelBuilder.Entity("EventManagementApp.Models.QuotationResponse", b =>
                {
                    b.Navigation("ClientResponse")
                        .IsRequired();
                });

            modelBuilder.Entity("EventManagementApp.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("QuotationRequests");

                    b.Navigation("Reviews");

                    b.Navigation("ScheduledEvents");

                    b.Navigation("UserCredential")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
